"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultiData = exports.SingleData = exports.None = exports.default = void 0;

var _NavItem = require("./NavItem");

var _default = {
  title: 'Tjikko/nav/NavItem',
  component: _NavItem.NavItem,
  argTypes: {
    styles: {
      control: {
        type: "select",
        options: ["default", "default/white", "flat"]
      }
    }
  },
  parameters: {
    componentSubtitle: 'The Buttons NavItem'
  }
};
exports.default = _default;

var Template = args => /*#__PURE__*/React.createElement(_NavItem.NavItem, args);

var None = Template.bind({});
exports.None = None;
None.args = {
  styles: "default",
  submenu: null
};
var SingleData = Template.bind({});
exports.SingleData = SingleData;
SingleData.args = {
  submenu: [{
    groupCaption: "Group 01",
    groups: [{
      name: "Link 01",
      url: "/linkURL",
      type: "link"
    }, {
      name: "Link 02",
      url: "/linkURL",
      type: "button"
    }, {
      name: "Link 03",
      url: "/linkURL",
      type: "button"
    }]
  }]
};
var MultiData = Template.bind({});
exports.MultiData = MultiData;
MultiData.args = {
  submenu: [{
    groupCaption: "Group 01",
    groups: [{
      name: "Link 01",
      url: "/linkURL",
      type: "link"
    }, {
      name: "Link 02",
      url: "/linkURL"
    }, {
      name: "Link 03",
      url: "/linkURL",
      type: "button"
    }]
  }, {
    groupCaption: "Group 02",
    groups: [{
      name: "Link 01",
      url: "/linkURL",
      type: "link"
    }, {
      name: "Link 02",
      url: "/linkURL"
    }, {
      name: "Link 03",
      url: "/linkURL",
      type: "link"
    }]
  }, {
    groupCaption: "Group 03",
    groups: [{
      name: "Link 01",
      url: "/linkURL",
      type: "button"
    }, {
      name: "Link 02",
      url: "/linkURL"
    }, {
      name: "Link 03",
      url: "/linkURL"
    }]
  }]
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NvbXBvbmVudHMvbmF2L05hdkl0ZW0uc3Rvcmllcy50c3giXSwibmFtZXMiOlsidGl0bGUiLCJjb21wb25lbnQiLCJOYXZJdGVtIiwiYXJnVHlwZXMiLCJzdHlsZXMiLCJjb250cm9sIiwidHlwZSIsIm9wdGlvbnMiLCJwYXJhbWV0ZXJzIiwiY29tcG9uZW50U3VidGl0bGUiLCJUZW1wbGF0ZSIsImFyZ3MiLCJOb25lIiwiYmluZCIsInN1Ym1lbnUiLCJTaW5nbGVEYXRhIiwiZ3JvdXBDYXB0aW9uIiwiZ3JvdXBzIiwibmFtZSIsInVybCIsIk11bHRpRGF0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztlQUdlO0FBQ2JBLEVBQUFBLEtBQUssRUFBRSxvQkFETTtBQUViQyxFQUFBQSxTQUFTLEVBQUVDLGdCQUZFO0FBR2JDLEVBQUFBLFFBQVEsRUFBRTtBQUNSQyxJQUFBQSxNQUFNLEVBQUU7QUFBQ0MsTUFBQUEsT0FBTyxFQUFFO0FBQUNDLFFBQUFBLElBQUksRUFBRSxRQUFQO0FBQWlCQyxRQUFBQSxPQUFPLEVBQUUsQ0FBQyxTQUFELEVBQVksZUFBWixFQUE2QixNQUE3QjtBQUExQjtBQUFWO0FBREEsR0FIRztBQU1iQyxFQUFBQSxVQUFVLEVBQUU7QUFDVkMsSUFBQUEsaUJBQWlCLEVBQUU7QUFEVDtBQU5DLEM7OztBQVdmLElBQU1DLFFBQTZCLEdBQUlDLElBQUQsaUJBQVUsb0JBQUMsZ0JBQUQsRUFBYUEsSUFBYixDQUFoRDs7QUFFTyxJQUFNQyxJQUFJLEdBQUdGLFFBQVEsQ0FBQ0csSUFBVCxDQUFjLEVBQWQsQ0FBYjs7QUFDUEQsSUFBSSxDQUFDRCxJQUFMLEdBQVk7QUFDVlAsRUFBQUEsTUFBTSxFQUFFLFNBREU7QUFFVlUsRUFBQUEsT0FBTyxFQUFFO0FBRkMsQ0FBWjtBQUtPLElBQU1DLFVBQVUsR0FBR0wsUUFBUSxDQUFDRyxJQUFULENBQWMsRUFBZCxDQUFuQjs7QUFDUEUsVUFBVSxDQUFDSixJQUFYLEdBQWtCO0FBQ2hCRyxFQUFBQSxPQUFPLEVBQ0wsQ0FDRTtBQUNFRSxJQUFBQSxZQUFZLEVBQUUsVUFEaEI7QUFFRUMsSUFBQUEsTUFBTSxFQUFFLENBQ047QUFDRUMsTUFBQUEsSUFBSSxFQUFFLFNBRFI7QUFFRUMsTUFBQUEsR0FBRyxFQUFFLFVBRlA7QUFHRWIsTUFBQUEsSUFBSSxFQUFFO0FBSFIsS0FETSxFQU1OO0FBQ0VZLE1BQUFBLElBQUksRUFBRSxTQURSO0FBRUVDLE1BQUFBLEdBQUcsRUFBRSxVQUZQO0FBR0ViLE1BQUFBLElBQUksRUFBRTtBQUhSLEtBTk0sRUFXTjtBQUNFWSxNQUFBQSxJQUFJLEVBQUUsU0FEUjtBQUVFQyxNQUFBQSxHQUFHLEVBQUUsVUFGUDtBQUdFYixNQUFBQSxJQUFJLEVBQUU7QUFIUixLQVhNO0FBRlYsR0FERjtBQUZjLENBQWxCO0FBd0JPLElBQU1jLFNBQVMsR0FBR1YsUUFBUSxDQUFDRyxJQUFULENBQWMsRUFBZCxDQUFsQjs7QUFDUE8sU0FBUyxDQUFDVCxJQUFWLEdBQWlCO0FBQ2ZHLEVBQUFBLE9BQU8sRUFBRSxDQUNQO0FBQ0VFLElBQUFBLFlBQVksRUFBRSxVQURoQjtBQUVFQyxJQUFBQSxNQUFNLEVBQUUsQ0FDTjtBQUNFQyxNQUFBQSxJQUFJLEVBQUUsU0FEUjtBQUVFQyxNQUFBQSxHQUFHLEVBQUUsVUFGUDtBQUdFYixNQUFBQSxJQUFJLEVBQUU7QUFIUixLQURNLEVBTU47QUFDRVksTUFBQUEsSUFBSSxFQUFFLFNBRFI7QUFFRUMsTUFBQUEsR0FBRyxFQUFFO0FBRlAsS0FOTSxFQVVOO0FBQ0VELE1BQUFBLElBQUksRUFBRSxTQURSO0FBRUVDLE1BQUFBLEdBQUcsRUFBRSxVQUZQO0FBR0ViLE1BQUFBLElBQUksRUFBRTtBQUhSLEtBVk07QUFGVixHQURPLEVBb0JQO0FBQ0VVLElBQUFBLFlBQVksRUFBRSxVQURoQjtBQUVFQyxJQUFBQSxNQUFNLEVBQUUsQ0FDTjtBQUNFQyxNQUFBQSxJQUFJLEVBQUUsU0FEUjtBQUVFQyxNQUFBQSxHQUFHLEVBQUUsVUFGUDtBQUdFYixNQUFBQSxJQUFJLEVBQUU7QUFIUixLQURNLEVBTU47QUFDRVksTUFBQUEsSUFBSSxFQUFFLFNBRFI7QUFFRUMsTUFBQUEsR0FBRyxFQUFFO0FBRlAsS0FOTSxFQVVOO0FBQ0VELE1BQUFBLElBQUksRUFBRSxTQURSO0FBRUVDLE1BQUFBLEdBQUcsRUFBRSxVQUZQO0FBR0ViLE1BQUFBLElBQUksRUFBRTtBQUhSLEtBVk07QUFGVixHQXBCTyxFQXVDUDtBQUNFVSxJQUFBQSxZQUFZLEVBQUUsVUFEaEI7QUFFRUMsSUFBQUEsTUFBTSxFQUFFLENBQ047QUFDRUMsTUFBQUEsSUFBSSxFQUFFLFNBRFI7QUFFRUMsTUFBQUEsR0FBRyxFQUFFLFVBRlA7QUFHRWIsTUFBQUEsSUFBSSxFQUFFO0FBSFIsS0FETSxFQU1OO0FBQ0VZLE1BQUFBLElBQUksRUFBRSxTQURSO0FBRUVDLE1BQUFBLEdBQUcsRUFBRTtBQUZQLEtBTk0sRUFVTjtBQUNFRCxNQUFBQSxJQUFJLEVBQUUsU0FEUjtBQUVFQyxNQUFBQSxHQUFHLEVBQUU7QUFGUCxLQVZNO0FBRlYsR0F2Q087QUFETSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TmF2SXRlbSwgTmF2SXRlbVByb3BzfSBmcm9tIFwiLi9OYXZJdGVtXCJcbmltcG9ydCB7U3RvcnksIE1ldGF9IGZyb20gJ0BzdG9yeWJvb2svcmVhY3QvdHlwZXMtNi0wJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHRpdGxlOiAnVGppa2tvL25hdi9OYXZJdGVtJyxcbiAgY29tcG9uZW50OiBOYXZJdGVtLFxuICBhcmdUeXBlczoge1xuICAgIHN0eWxlczoge2NvbnRyb2w6IHt0eXBlOiBcInNlbGVjdFwiLCBvcHRpb25zOiBbXCJkZWZhdWx0XCIsIFwiZGVmYXVsdC93aGl0ZVwiLCBcImZsYXRcIl19fSxcbiAgfSxcbiAgcGFyYW1ldGVyczoge1xuICAgIGNvbXBvbmVudFN1YnRpdGxlOiAnVGhlIEJ1dHRvbnMgTmF2SXRlbSdcbiAgfVxufSBhcyBNZXRhXG5cbmNvbnN0IFRlbXBsYXRlOiBTdG9yeTxOYXZJdGVtUHJvcHM+ID0gKGFyZ3MpID0+IDxOYXZJdGVtIHsuLi5hcmdzfSAvPlxuXG5leHBvcnQgY29uc3QgTm9uZSA9IFRlbXBsYXRlLmJpbmQoe30pXG5Ob25lLmFyZ3MgPSB7XG4gIHN0eWxlczogXCJkZWZhdWx0XCIsXG4gIHN1Ym1lbnU6IG51bGxcbn1cblxuZXhwb3J0IGNvbnN0IFNpbmdsZURhdGEgPSBUZW1wbGF0ZS5iaW5kKHt9KVxuU2luZ2xlRGF0YS5hcmdzID0ge1xuICBzdWJtZW51OlxuICAgIFtcbiAgICAgIHtcbiAgICAgICAgZ3JvdXBDYXB0aW9uOiBcIkdyb3VwIDAxXCIsXG4gICAgICAgIGdyb3VwczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiTGluayAwMVwiLFxuICAgICAgICAgICAgdXJsOiBcIi9saW5rVVJMXCIsXG4gICAgICAgICAgICB0eXBlOiBcImxpbmtcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJMaW5rIDAyXCIsXG4gICAgICAgICAgICB1cmw6IFwiL2xpbmtVUkxcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiTGluayAwM1wiLFxuICAgICAgICAgICAgdXJsOiBcIi9saW5rVVJMXCIsXG4gICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XVxufVxuZXhwb3J0IGNvbnN0IE11bHRpRGF0YSA9IFRlbXBsYXRlLmJpbmQoe30pXG5NdWx0aURhdGEuYXJncyA9IHtcbiAgc3VibWVudTogW1xuICAgIHtcbiAgICAgIGdyb3VwQ2FwdGlvbjogXCJHcm91cCAwMVwiLFxuICAgICAgZ3JvdXBzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiBcIkxpbmsgMDFcIixcbiAgICAgICAgICB1cmw6IFwiL2xpbmtVUkxcIixcbiAgICAgICAgICB0eXBlOiBcImxpbmtcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogXCJMaW5rIDAyXCIsXG4gICAgICAgICAgdXJsOiBcIi9saW5rVVJMXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6IFwiTGluayAwM1wiLFxuICAgICAgICAgIHVybDogXCIvbGlua1VSTFwiLFxuICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgZ3JvdXBDYXB0aW9uOiBcIkdyb3VwIDAyXCIsXG4gICAgICBncm91cHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6IFwiTGluayAwMVwiLFxuICAgICAgICAgIHVybDogXCIvbGlua1VSTFwiLFxuICAgICAgICAgIHR5cGU6IFwibGlua1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiBcIkxpbmsgMDJcIixcbiAgICAgICAgICB1cmw6IFwiL2xpbmtVUkxcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogXCJMaW5rIDAzXCIsXG4gICAgICAgICAgdXJsOiBcIi9saW5rVVJMXCIsXG4gICAgICAgICAgdHlwZTogXCJsaW5rXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgZ3JvdXBDYXB0aW9uOiBcIkdyb3VwIDAzXCIsXG4gICAgICBncm91cHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6IFwiTGluayAwMVwiLFxuICAgICAgICAgIHVybDogXCIvbGlua1VSTFwiLFxuICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6IFwiTGluayAwMlwiLFxuICAgICAgICAgIHVybDogXCIvbGlua1VSTFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiBcIkxpbmsgMDNcIixcbiAgICAgICAgICB1cmw6IFwiL2xpbmtVUkxcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICBdXG59XG4iXX0=